//
import SwiftUI
import SafariServices

struct SampleBridgingUIKit: View {
  @State private var searchText: String = ""
  @State private var showSafari = false
  
  var body: some View {
    Form {
      #if os(iOS)
      Section {
        SearchBarView(searchText: $searchText)
      } header: {
        Text("UIViewRepresentable")
      } footer: {
        Text(searchText)
      }
      .textCase(nil)
      
      Section("UIViewControllerRepresentable") {
        Button("Apple") {
          showSafari.toggle()
        }
        .sheet(isPresented: $showSafari) {
          SafariView(url: .init(string: "https://apple.com")!)
        }
      }
      .textCase(nil)
      #else
      Text("请在 iOS 上查看示例")
      #endif
    }
    .formStyle(.grouped)
  }
}

#if os(iOS)
struct SearchBarView: UIViewRepresentable {
  @Binding var searchText: String
  
  class Coordinator: NSObject, UISearchBarDelegate {
    var searchBarView: SearchBarView
    
    init(_ searchBarView: SearchBarView) {
      self.searchBarView = searchBarView
    }
    
    func searchBar(
      _ searchBar: UISearchBar,
      textDidChange searchText: String
    ) {
      searchBarView.searchText = searchText
    }
    
    func searchBarSearchButtonClicked(
      _ searchBar: UISearchBar
    ) {
      searchBar.endEditing(true)
    }
  }
  
  func makeCoordinator() -> Coordinator {
    Coordinator(self)
  }
  
  func makeUIView(context: Context) -> UISearchBar {
    let uiView = UISearchBar()
    uiView.placeholder = "Input something..."
    uiView.searchBarStyle = .minimal
    uiView.delegate = context.coordinator
    return uiView
  }
  
  func updateUIView(_ uiView: UISearchBar, context: Context) {
    uiView.text = searchText
  }
}

struct SafariView: UIViewControllerRepresentable {
  let url: URL
  
  func makeUIViewController(
    context: Context
  ) -> SFSafariViewController {
    let controller = SFSafariViewController(url: url)
    return controller
  }
  
  func updateUIViewController(
    _ uiViewController: SFSafariViewController,
    context: Context
  ) {
    
  }
}
#endif

struct SampleBridgingUIKit_Previews: PreviewProvider {
  static var previews: some View {
    SampleBridgingUIKit()
  }
}




//  main.swift
//  Swift5.7
//
//  Created by zzzwco on 2022/11/19.
//

import Foundation
import RegexBuilder
import SwiftUI

// https://github.com/apple/swift/blob/main/CHANGELOG.md

let symbol = "======================\n"

// MARK: - Optional shorthand

printLog("Optional shorthand", symbol: symbol)

let s1: String? = "s1"

if let s1 {
  printLog(s1)
}

guard let s1 else {
  exit(0)
}
printLog(s1)

// MARK: - More powerful type inference

// MARK: Type inference from default expressions

func compute<C: Collection>(_ values: C = [0, 1, 2]) { }

compute([1, 2, 3]) // [Int]
compute(["a", "b", "c"]) // [String]
compute([1, "2", {}]) // [Any]

// MARK: Enable multi-statement closure parameter/result type inference

let _ = [-1, 0, 1].map { v -> String in
  if v < 0 {
    return "negative"
  } else if v > 0 {
    return "positive"
  } else {
    return "zero"
  }
}

let _ = [-1, 0, 1].map {
  if $0 < 0 {
    return "negative"
  } else if $0 > 0 {
    return "positive"
  } else {
    return "zero"
  }
}

// MARK: - Clarify the Execution of Non-Actor-Isolated Async Functions

class C { }

// 总是在全局的协作并发池上执行
func f(_: C) async { }

actor A {
  func g(c: C) async {
    // 总是在 actor 上执行
    print("on the actor")

    await f(c)
  }
}

// MARK: - Regex

// MARK: Regex Type

printLog("Regex Type", symbol: symbol)

let s = "Stay hungry, stay foolish."
let regex1 = try! Regex("[Ss]tay")
let matches1 = s.matches(of: regex1)
for match in matches1 {
  let l = match.range.lowerBound
  let r = match.range.upperBound
  printLog(s[l..<r])
}

// MARK: Regex builder DSL

printLog("Regex builder DSL", symbol: symbol)

let regex2 = Regex {
  "Stay "
  Capture {
    OneOrMore(.word) // matches2.1
  }
  ", stay "
  Capture {
    OneOrMore(.word) // matches2.2
  }
  "."
}
if let matches2 = try regex2.wholeMatch(in: s) {
  // matches2.0 是整个匹配的字符串
  printLog(matches2.0, matches2.1, matches2.2)
}

let ref1 = Reference(Substring.self)
let ref2 = Reference(Substring.self)
let regex3 = Regex {
  "Stay "
  Capture(as: ref1) { // res[ref1]
    OneOrMore(.word)
  }
  ", stay "
  Capture(as: ref2) { // res[ref2]
    OneOrMore(.word)
  }
  "."
}
if let matches3 = try regex3.wholeMatch(in: s) {
  printLog(matches3[ref1], matches3[ref2])
}

// MARK: Regex Literals

printLog("Regex Literals", symbol: symbol)

let regex4 = /[Ss]tay/
let matches4 = s.matches(of: regex4)
for match in matches4 {
  let l = match.range.lowerBound
  let r = match.range.upperBound
  printLog(s[l..<r])
}

let regex5 = /Stay (?<s1>.+), stay (?<s2>[A-Za-z0-9]+)./
if let matches5 = try regex5.wholeMatch(in: s) {
  printLog(matches5.s1, matches5.s2)
}

let regex6 = Regex {
  "Stay"
  Capture { // 空格使用使用\转义
    /\ .+/
  }
  ", stay"
  Capture {
    /\ [A-Za-z0-9]+/
  }
  "."
}
if let matches6 = try regex6.wholeMatch(in: s) {
  printLog(matches6.1, matches6.2)
}

// MARK: Regex-powered string processing algorithms

printLog("Regex-powered string processing algorithms", symbol: symbol)

printLog(s.replacing(/[Ss]tay/, with: "be"))
printLog(s.contains(/\ foo.+/))

// MARK: - Clock, Instant, and Duration

printLog("Clock, Instant, and Duration", symbol: symbol)

let clock = ContinuousClock()
let elapsed = clock.measure {
  for _ in 0..<999999 {}
}
printLog("Loop duration: \(elapsed)")

func delayWork() async throws {
  let elapsed = try await clock.measure {
    // tolerance 为容差，默认为 nil
    // 这里表示任务会睡眠 0.5 至 1 秒
    try await Task.sleep(until: .now + .seconds(0.5), tolerance: .seconds(0.5), clock: .continuous)
  }
  printLog("Sleep duration: \(elapsed)")
  printLog("Time is up, keep working...")
}

try await delayWork()

// MARK: - Opaque Types

func tuple(_ v1: some View, _ v2: some View) -> (some View, some View) {
  (v1, v2)
}

// MARK: - Lightweight same-type requirements for primary associated types

//func compare<C1: Collection, C2: Collection>(_ c1: C1, _ c2: C2) -> Bool
//where C1.Element == C2.Element, C1.Element: Equatable {
//  if c1.count != c2.count { return false }
//  for i in 0..<c1.count {
//    let v1 = c1[c1.index(c1.startIndex, offsetBy: i)]
//    let v2 = c2[c2.index(c2.startIndex, offsetBy: i)]
//    if v1 != v2 {
//      return false
//    }
//  }
//  return true
//}

func compare<E: Equatable>(_ c1: some Collection<E>, _ c2: some Collection<E>) -> Bool {
  if c1.count != c2.count { return false }
  for i in 0..<c1.count {
    let v1 = c1[c1.index(c1.startIndex, offsetBy: i)]
    let v2 = c2[c2.index(c2.startIndex, offsetBy: i)]
    if v1 != v2 {
      return false
    }
  }
  return true
}

let c1: [Int] = [1, 2, 3]
let c2: Set<Int> = [1, 2, 3]
let ans = compare(c1, c2) // true
printLog(ans)

//some P
//T where T: P

//some P<V>
//T where T: P, T.E: V

// MARK: - Existential Types

// MARK: Implicitly Opened Existentials=

protocol P {
  associatedtype A
  func getA() -> A
}

func takeP<T: P>(_ value: T) { }

func test(p: any P) {
  // error: protocol 'P' as a type cannot conform to itself
  takeP(p)
}

// MARK: Constrained Existential Types

func mapNumbers(_ c: any Collection<Int>) -> [Int] {
  c.map { $0 }
}
// Module: _Distributed

protocol DistributedActorSystem: Sendable {
  /// The type of `ID` assigned to a distributed actor while initializing with this actor system.
  /// The identity should be meaningfully unique, in the sense that ID equality should mean referring to the
  /// same distributed actor.
  ///
  /// A distributed actor created using a specific actor system will use the system's `ActorID` as
  /// the `ID` type it stores and for its `Hashable` implementation.
  ///
  /// ### Implicit distribute actor `Codable` conformance
  /// If the `ActorID` (and therefore also the `DistributedActor.ID`) conforms to `Codable`,
  /// the `distributed actor` will gain an automatically synthesized conformance to `Codable` as well.
  associatedtype ActorID: Sendable & Hashable

  /// The specific type of the invocation encoder that will be created and populated
  /// with details about the invocation when a remote call is about to be made.
  ///
  /// The populated instance will be passed to the `remoteCall` from where it can be
  /// used to serialize into a message format in order to perform the remote invocation.
  associatedtype InvocationEncoder: DistributedTargetInvocationEncoder

  /// The specific type of invocation decoder used by this actor system.
  ///
  /// An instance of this type must be passed to `executeDistributedTarget` which
  /// extracts arguments and applies them to the local target of the invocation.
  associatedtype InvocationDecoder: DistributedTargetInvocationDecoder

  /// The serialization requirement that will be applied to all distributed targets used with this system.
  ///
  /// An actor system is still allowed to throw serialization errors if a specific value passed to a distributed
  /// func violates some other restrictions that can only be checked at runtime, e.g. checking specific types
  /// against an "allow-list" or similar. The primary purpose of the serialization requirement is to provide
  /// compile time hints to developers, that they must carefully consider evolution and serialization of
  /// values passed to and from distributed methods and computed properties.
  associatedtype SerializationRequirement
    where SerializationRequirement == InvocationEncoder.SerializationRequirement,
          SerializationRequirement == InvocationDecoder.SerializationRequirement

  // ==== ---------------------------------------------------------------------
  // - MARK: Actor Lifecycle

  /// Called by a distributed when it begins its initialization (in a non-delegating init).
  ///
  /// The system should take special care to not assign two actors the same `ID`, and the `ID`
  /// must remain valid until it is resigned (see `resignID(_:)`).
  func assignID<Actor>(_ actorType: Actor.Type) -> ActorID
      where Actor: DistributedActor,
            Actor.ID == ActorID

  /// Automatically called by in every distributed actor's non-delegating initializer.
  ///
  /// The call is made specifically before the `self` of such distributed actor is about to
  /// escape, e.g. via a function call, closure or otherwise. If no such event occurs the
  /// call is made at the end of the initializer.
  ///
  /// The passed `actor` is the `self` of the initialized actor, and its `actor.id` is expected
  /// to be of the same value that was assigned to it in `assignID`.
  ///
  /// After the ready call returns, it must be possible to resolve it using the 'resolve(_:as:)'
  /// method on the system.
  func actorReady<Actor>(_ actor: Actor)
      where Actor: DistributedActor,
            Actor.ID == ActorID

  /// Called when the distributed actor is deinitialized (or has failed to finish initializing).
  ///
  /// The system may release any resources associated with this actor id, and should not make
  /// further attempts to deliver messages to the actor identified by this identity.
  func resignID(_ id: ActorID)

  // ==== ---------------------------------------------------------------------
  // - MARK: Resolving distributed actors

  /// Resolve a local or remote actor address to a real actor instance, or throw if unable to.
  /// The returned value is either a local actor or proxy to a remote actor.
  ///
  /// Resolving an actor is called when a specific distributed actors `init(from:)`
  /// decoding initializer is invoked. Once the actor's identity is deserialized
  /// using the `decodeID(from:)` call, it is fed into this function, which
  /// is responsible for resolving the identity to a remote or local actor reference.
  ///
  /// If the resolve fails, meaning that it cannot locate a local actor managed for
  /// this identity, managed by this transport, nor can a remote actor reference
  /// be created for this identity on this transport, then this function must throw.
  ///
  /// If this function returns correctly, the returned actor reference is immediately
  /// usable. It may not necessarily imply the strict *existence* of a remote actor
  /// the identity was pointing towards, e.g. when a remote system allocates actors
  /// lazily as they are first time messaged to, however this should not be a concern
  /// of the sending side.
  ///
  /// Detecting liveness of such remote actors shall be offered / by transport libraries
  /// by other means, such as "watching an actor for termination" or similar.
  func resolve<Actor>(_ id: ActorID, as actorType: Actor.Type) throws -> Actor?
      where Actor: DistributedActor,
            Actor.ID: ActorID,
            Actor.SerializationRequirement == Self.SerializationRequirement

  // ==== ---------------------------------------------------------------------
  // - MARK: Remote Target Invocations

  /// Invoked by the Swift runtime when a distributed remote call is about to be made.
  ///
  /// The returned `InvocationEncoder` will be populated with all
  /// generic substitutions, arguments, and specific error and return types
  /// that are associated with this specific invocation.
  func makeInvocationEncoder() -> InvocationEncoder

  // We'll discuss the remoteCall method in detail in this proposal.
  // It cannot be declared as protocol requirement, and remains an ad-hoc
  // requirement like this:
  /// Invoked by the Swift runtime when making a remote call.
  ///
  /// The `invocation` is the arguments container that was previously created
  /// by `makeInvocationEncoder` and has been populated with all arguments.
  ///
  /// This method should perform the actual remote function call, and await for its response.
  ///
  /// ## Errors
  /// This method is allowed to throw because of underlying transport or serialization errors,
  /// as well as by re-throwing the error received from the remote callee (if able to).
  ///
  /// Ad-hoc protocol requirement.
  func remoteCall<Actor, Failure, Success>(
      on actor: Actor,
      target: RemoteCallTarget,
      invocation: inout InvocationEncoder,
      throwing: Failure.Type,
      returning: Success.Type
  ) async throws -> Success
      where Actor: DistributedActor,
            Actor.ID == ActorID,
            Failure: Error,
            Success: Self.SerializationRequirement

  /// Invoked by the Swift runtime when making a remote call to a `Void` returning function.
  ///
  /// ( ... Same as `remoteCall` ... )
  ///
  /// Ad-hoc protocol requirement.
  func remoteCallVoid<Actor, Error>(
      on actor: Actor,
      target: RemoteCallTarget,
      invocation: inout InvocationEncoder,
      throwing: Failure.Type
  ) async throws
      where Actor: DistributedActor,
            Actor.ID == ActorID,
            Failure: Error
}

/// A distributed 'target' can be a `distributed func` or `distributed` computed property.
///
/// The actor system should encode the identifier however it sees fit,
/// and transmit it to the remote peer in order to invoke identify the target of an invocation.
public struct RemoteCallTarget: Hashable {
  /// The mangled name of the invoked distributed method.
  ///
  /// It contains all information necessary to lookup the method using `executeDistributedActorMethod(...)`
  var mangledName: String { ... }

  /// The human-readable "full name" of the invoked method, e.g. 'Greeter.hello(name:)'.
  var fullName: String { ... }
}
//
//  main.swift
//  any-some
//
//  Created by zzzwco on 2022/11/19.
//

import Foundation
import SwiftUI

// MARK: - Opaque types, some

var body: some View {
  Text("Hello")
}

//var body: View {
//  Bool.random() ? Text("Hello") : Image(systemName: "swift")
//}

func build1<V: View>(_ v: V) -> V {
  v
}
// v1 is Text
let v1 = build1(Text("Hello"))

func build2() -> some View {
  Text("Hello")
}

let v2 = build2()

// MARK: - Existential types, any

protocol P {}

struct CP1: P {}
struct CP2: P {}

func f1(_ p: any P) -> any P {
  p
}

func f2<V: P>(_ p: V) -> V {
  p
}

func f3() -> any P {
  Bool.random() ? CP1() : CP2()
}

_ = f2(CP1())

// MARK: - More elegant generics

//func compare<C1: Collection, C2: Collection>(_ c1: C1, _ c2: C2) -> Bool
//where C1.Element == C2.Element, C1.Element: Equatable {
//  if c1.count != c2.count { return false }
//  for i in 0..<c1.count {
//    let v1 = c1[c1.index(c1.startIndex, offsetBy: i)]
//    let v2 = c2[c2.index(c2.startIndex, offsetBy: i)]
//    if v1 != v2 {
//      return false
//    }
//  }
//  return true
//}

func compare<E: Equatable>(_ c1: some Collection<E>, _ c2: some Collection<E>) -> Bool {
  if c1.count != c2.count { return false }
  for i in 0..<c1.count {
    let v1 = c1[c1.index(c1.startIndex, offsetBy: i)]
    let v2 = c2[c2.index(c2.startIndex, offsetBy: i)]
    if v1 != v2 {
      return false
    }
  }
  return true
}

let c1: [Int] = [1, 2, 3]
let c2: Set<Int> = [1, 2, 3]
let ans = compare(c1, c2) // true
printLog(ans)

//some P
//T where T: P

//some P<V>
//T where T: P, T.E: V






