import socket
def start_client(host='localhost', port=12345):
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))
print(f"Connected to server at {host}:{port}")
while True:
message = input("Enter message: ")
if message.lower() == 'exit':
break
client_socket.send(message.encode('utf-8'))
response = client_socket.recv(1024).decode('utf-8')
print(f"Received from server: {response}")
client_socket.close()
if __name__ == "__main__":
start_client()
import socket
import speech_recognition as sr
def start_client(host='localhost', port=12345):
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))
print(f"Connected to server at {host}:{port}"
recognizer = sr.Recognizer()
microphone = sr.Microphone()
while True:
print("Say something:")
with microphone as source:
audio = recognizer.listen(source)
try:
message = recognizer.recognize_google(audio)
print(f"You said: {message}")
if message.lower() == 'exit':
break
client_socket.send(message.encode('utf-8'))
response = client_socket.recv(1024).decode('utf-8')
print(f"Received from server: {response}")
except sr.UnknownValueError:
print("Sorry, I did not understand that.")
except sr.RequestError as e:
print(f"Could not request results; {e}")
client_socket.close()
if __name__ == "__main__":
start_client()
import socket
def start_server(host='localhost', port=12345)
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((host, port))
server_socket.listen(5)
print(f"Server started at {host}:{port}")
while True:
client_socket, addr = server_socket.accept()
print(f"Connection from {addr}")
handle_client(client_socket)
def handle_client(client_socket):
while True:
message = client_socket.recv(1024).decode('utf-8')
if not message:
break
print(f"Received: {message}")
response = process_message(message)
client_socket.send(response.encode('utf-8'))
client_socket.close()
def process_message(message):
# Add logic to handle specific commands
if message.lower() == 'hello':
return "Hello! How can I assist you?"
elif message.lower() == 'status':
return "Server is running smoothly."
else:
return f"Echo: {message}
if __name__ == "__main__":
start_server()
import socket
import requests
ALPHA_VANTAGE_API_KEY = 'your_alpha_vantage_api_key'
OPENWEATHERMAP_API_KEY = 'your_openweathermap_api_key'
def start_server(host='localhost', port=12345):
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((host, port))
server_socket.listen(5)
print(f"Server started at {host}:{port}")
while True:
client_socket, addr = server_socket.accept()
print(f"Connection from {addr}")
handle_client(client_socket)
def handle_client(client_socket):
while True:
message = client_socket.recv(1024).decode('utf-8')
if not message:
break
print(f"Received: {message}")
response = process_message(message)
client_socket.send(response.encode('utf-8'))
client_socket.close(
def process_message(message):
if message.lower() == 'hello':
return "Hello! How can I assist you?"
elif message.lower() == 'status':
return "Server is running smoothly."
elif message.lower().startswith('stock'):
return get_stock_price(message.split()[1])
elif message.lower().startswith('weather'):
return get_weather(message.split()[1])
else:
return f"Echo: {message}"
def get_stock_price(symbol):
url = 
f'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={symbol}
&interval=1min&apikey={ALPHA_VANTAGE_API_KEY}'
response = requests.get(url)
data = response.json()
try:
latest_time = list(data['Time Series (1min)'].keys())[0]
price = data['Time Series (1min)'][latest_time]['1. open']
return f"The latest price of {symbol} is {price}"
except KeyError:
return "Could not retrieve stock data."
def get_weather(city)
url = 
f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHERMAP_
API_KEY}'
response = requests.get(url)
data = response.json()
try:
weather = data['weather'][0]['description']
temperature = data['main']['temp']
return f"The weather in {city} is {weather} with a temperature of {temperature}K"
except KeyError:
return "Could not retrieve weather data."
if __name__ == "__main__":
start_server()
import socket
import speech_recognition as sr
def start_client(host='localhost', port=12345):
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))
print(f"Connected to server at {host}:{port}")
recognizer = sr.Recognizer()
microphone = sr.Microphone()
while True:
print("Say something:")
with microphone as source
audio = recognizer.listen(source)
try:
message = recognizer.recognize_google(audio)
print(f"You said: {message}")
if message.lower() == 'exit':
break
client_socket.send(message.encode('utf-8'))
response = client_socket.recv(1024).decode('utf-8')
print(f"Received from server: {response}")
except sr.UnknownValueError:
print("Sorry, I did not understand that.")
except sr.RequestError as e:
print(f"Could not request results; {e}")
client_socket.close()
if __name__ == "__main__":
start_client()
import socket
def start_server(host='localhost', port=12345):
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((host, port))
server_socket.listen(5)
print(f"Server started at {host}:{port}")
while True
client_socket, addr = server_socket.accept()
print(f"Connection from {addr}")
handle_client(client_socket)
def handle_client(client_socket):
while True:
message = client_socket.recv(1024).decode('utf-8')
if not message:
break
print(f"Received: {message}")
response = f"Echo: {message}"
client_socket.send(response.encode('utf-8'))
client_socket.close()
if __name__ == "__main__":
start_server()
import socket
def start_client(host='localhost', port=12345):
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((host, port))
print(f"Connected to server at {host}:{port}")
while True:
message = input("Enter message: ")
if message.lower() == 'exit':
break
client_socket.send(message.encode('utf-8'))
response = client_socket.recv(1024).decode('utf-8')
print(f"Received from server: {response}")
client_socket.close()
if __name__ == "__main__":
start_client(